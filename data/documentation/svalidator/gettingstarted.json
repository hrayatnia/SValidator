{"primaryContentSections":[{"content":[{"anchor":"Installation","text":"Installation","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"To use SValidator in your project, add the following dependency to your "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":[".package(url: \"https:\/\/github.com\/hrayatnia\/SValidator.git\", from: \"1.0.0\")"]},{"level":2,"type":"heading","anchor":"Usage","text":"Usage"},{"type":"heading","level":3,"text":"Using @Validate","anchor":"Using-Validate"},{"inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/SValidator\/documentation\/SValidator\/Validate","isActive":true,"type":"reference"},{"type":"text","text":" property wrapper allows defining validation rules inline:"}],"type":"paragraph"},{"syntax":"swift","code":["struct User {","    @Validate({","        LengthValidator(min: 5, max: 10)","        RegexValidator(pattern: \"^[a-zA-Z]+$\")","    })","    var username: String = \"JohnDoe\"","}"],"type":"codeListing"},{"text":"Implementing a Custom Validator","type":"heading","level":3,"anchor":"Implementing-a-Custom-Validator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To define a custom validator, conform to the "},{"code":"Validator","type":"codeVoice"},{"type":"text","text":" protocol:"}]},{"type":"codeListing","syntax":"swift","code":["struct EmailValidator: Validator {","    func validate(_ value: String) throws {","        if !value.contains(\"@\") {","            throw ValidationError.invalidEmail","        }","    }","}"]},{"type":"heading","anchor":"Using-ValidatorBuilder","text":"Using `ValidatorBuilder`","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"ValidatorBuilder","type":"codeVoice"},{"text":" enables grouping multiple validators concisely:","type":"text"}]},{"syntax":"swift","code":["let validators = ValidatorBuilder<String> {","    EmailValidator()","    LengthValidator(min: 5, max: 50)","}"],"type":"codeListing"},{"level":2,"anchor":"Validation-Checks","text":"Validation Checks","type":"heading"},{"inlineContent":[{"type":"text","text":"You can check validation states dynamically:"}],"type":"paragraph"},{"type":"codeListing","code":["if $username.isValid {","    print(\"Valid username\")","} else if let error = $username.validationError {","    print(\"Validation error: \\(error)\")","}"],"syntax":"swift"},{"anchor":"Contributing","type":"heading","text":"Contributing","level":2},{"inlineContent":[{"type":"text","text":"Contributions are welcome! Feel free to submit issues or pull requests."}],"type":"paragraph"},{"text":"License","type":"heading","anchor":"License","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"MIT License. See "},{"type":"codeVoice","code":"LICENSE"},{"type":"text","text":" file for details."}]}],"kind":"content"}],"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SValidator\/documentation\/SValidator\/GettingStarted"},"hierarchy":{"paths":[["doc:\/\/SValidator\/documentation\/SValidator"]]},"sections":[],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"SValidator"}],"title":"How to Start"},"variants":[{"paths":["\/documentation\/svalidator\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://SValidator/documentation/SValidator":{"role":"collection","title":"SValidator","kind":"symbol","identifier":"doc:\/\/SValidator\/documentation\/SValidator","url":"\/documentation\/svalidator","type":"topic","abstract":[]},"doc://SValidator/documentation/SValidator/Validate":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Validate"}],"kind":"symbol","url":"\/documentation\/svalidator\/validate","type":"topic","identifier":"doc:\/\/SValidator\/documentation\/SValidator\/Validate","navigatorTitle":[{"text":"Validate","kind":"identifier"}],"role":"symbol","title":"Validate","abstract":[{"type":"text","text":"A property wrapper that applies validation logic to a property using a set of "},{"code":"Validator","type":"codeVoice"},{"type":"text","text":" objects."}]}}}